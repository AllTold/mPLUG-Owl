import time
import argparse
import datetime
import json
import os
import gradio as gr
import requests
from .ustils import (
    mplug_owl, load_demo_refresh_model_list, vote_last_response, 
    upvote_last_response, downvote_last_response, flag_last_response, regenerate, 
    add_text, after_process_image, get_inputs, init,
    headers, no_change_btn, enable_btn, disable_btn, get_window_url_params
)
from gradio_css import code_highlight_css
from gradio_patch import Chatbot as grChatbot
from .conversation import default_conversation

io = None
init()
model = mplug_owl(device="cuda")
log_dir = ""

def load_demo(url_params, request: gr.Request):

    dropdown_update = gr.Dropdown.update(visible=True)
    if "model" in url_params:
        model = url_params["model"]
        if model in models:
            dropdown_update = gr.Dropdown.update(
                value=model, visible=True)

    state = default_conversation.copy()

    return (state,
            dropdown_update,
            gr.Chatbot.update(visible=True),
            gr.Textbox.update(visible=True),
            gr.Button.update(visible=True),
            gr.Row.update(visible=True),
            gr.Accordion.update(visible=True))

def clear_history(request: gr.Request):
    state = default_conversation.copy()

    return (state, state.to_gradio_chatbot(), "", None) + (disable_btn,) * 5

def http_bot(state, topk, max_new_tokens, random_seed, request: gr.Request):
    prompt = after_process_image(state.get_prompt())
    images = state.get_images()
    state.messages[-1][-1] = "‚ñå"
    yield (state, state.to_gradio_chatbot()) + (disable_btn,) * 5

    try:
        data = get_inputs(prompt, images, topk, max_new_tokens, random_seed)
        output = model.prediction(data, log_dir)
        print(output)
        # output = output.replace("```", "")

        state.messages[-1][-1] = output + "‚ñå"
        yield (state, state.to_gradio_chatbot()) + (disable_btn,) * 5
        time.sleep(0.03)

    except requests.exceptions.RequestException as e:
        state.messages[-1][-1] = "**NETWORK ERROR DUE TO HIGH TRAFFIC. PLEASE REGENERATE OR REFRESH THIS PAGE.**"
        yield (state, state.to_gradio_chatbot()) + (disable_btn, disable_btn, disable_btn, enable_btn, enable_btn)
        return

    state.messages[-1][-1] = state.messages[-1][-1][:-1]
    yield (state, state.to_gradio_chatbot()) + (enable_btn,) * 5

title_markdown = ("""
# mPLUG-Owlü¶â (GitHub Repo: https://github.com/X-PLUG/mPLUG-Owl)
""")

tos_markdown = ("""
### Terms of use
By using this service, users are required to agree to the following terms:
The service is a research preview intended for non-commercial use only. It only provides limited safety measures and may generate offensive content. It must not be used for any illegal, harmful, violent, racist, or sexual purposes. The service may collect user dialogue data for future research.
Please click the "Flag" button if you get any inappropriate answer! We will collect those to keep improving our moderator.
For an optimal experience, please use desktop computers for this demo, as mobile devices may compromise its quality.

Copyright 2023 Alibaba DAMO Academy.
""")

learn_more_markdown = ("""
### License
The service is a research preview intended for non-commercial use only, subject to the model [License](https://github.com/facebookresearch/llama/blob/main/MODEL_CARD.md) of LLaMA, [Terms of Use](https://openai.com/policies/terms-of-use) of the data generated by OpenAI, and [Privacy Practices](https://chrome.google.com/webstore/detail/sharegpt-share-your-chatg/daiacboceoaocpibfodeljbdfacokfjb) of ShareGPT. Please contact us if you find any potential violation.
""")

css = code_highlight_css + """
version 1.0
"""

def build_demo():
    with gr.Blocks(title="mPLUG-Owlü¶â", theme=gr.themes.Base(), css=css) as demo:
        state = gr.State()

        gr.Markdown(title_markdown)

        with gr.Row():
            with gr.Column(scale=3):

                imagebox = gr.Image(type="pil")

                with gr.Accordion("Parameters", open=True, visible=False) as parameter_row:
                    topk = gr.Slider(minimum=1, maximum=5, value=5, step=1, interactive=True, label="Top K",)
                    max_output_tokens = gr.Slider(minimum=0, maximum=1024, value=512, step=64, interactive=True, label="Max output tokens",)
                    temperature = gr.Slider(minimum=0, maximum=10, value=1, step=0.1, interactive=True, label="Temperature",)
                gr.Markdown(tos_markdown)

            with gr.Column(scale=6):
                chatbot = grChatbot(elem_id="chatbot", visible=False).style(height=550)
                with gr.Row():
                    with gr.Column(scale=8):
                        textbox = gr.Textbox(show_label=False,
                            placeholder="Enter text and press ENTER", visible=False).style(container=False)
                    with gr.Column(scale=1, min_width=60):
                        submit_btn = gr.Button(value="Submit", visible=False)
                with gr.Row(visible=False) as button_row:
                    upvote_btn = gr.Button(value="üëç  Upvote", interactive=False)
                    downvote_btn = gr.Button(value="üëé  Downvote", interactive=False)
                    flag_btn = gr.Button(value="‚ö†Ô∏è  Flag", interactive=False)
                    regenerate_btn = gr.Button(value="üîÑ  Regenerate", interactive=False)
                    clear_btn = gr.Button(value="üóëÔ∏è  Clear history", interactive=False)

        gr.Examples(examples=[
            [f"examples/monday.jpg", "Explain why this meme is funny."],
            [f'examples/rap.jpeg', 'Can you write me a master rap song that rhymes very well based on this image?'],
            [f'examples/titanic.jpeg', 'What happened at the end of this movie?'],
            [f'examples/vga.jpeg', 'What is funny about this image? Describe it panel by panel.'],
            [f'examples/mug_ad.jpeg', 'We design new mugs shown in the image. Can you help us write an advertisement?'],
            [f'examples/laundry.jpeg', 'Why this happens and how to fix it?'],
            [f'examples/ca.jpeg', "What do you think about the person's behavior?"],
            [f'examples/monalisa-fun.jpg', 'Do you know who drew this painting?‚Äã'],
            [f"examples/Yao_Ming.jpeg", "What is the name of the man on the right?"],
        ], inputs=[imagebox, textbox])

        gr.Markdown(learn_more_markdown)
        url_params = gr.JSON(visible=False)

        btn_list = [upvote_btn, downvote_btn, flag_btn, regenerate_btn, clear_btn]
        upvote_btn.click(upvote_last_response,
            [state], [textbox, upvote_btn, downvote_btn, flag_btn])
        downvote_btn.click(downvote_last_response,
            [state], [textbox, upvote_btn, downvote_btn, flag_btn])
        flag_btn.click(flag_last_response,
            [state], [textbox, upvote_btn, downvote_btn, flag_btn])
        regenerate_btn.click(regenerate, state,
            [state, chatbot, textbox, imagebox] + btn_list).then(
            http_bot, [state, topk, max_output_tokens, temperature],
            [state, chatbot] + btn_list)
        clear_btn.click(clear_history, None, [state, chatbot, textbox, imagebox] + btn_list)

        textbox.submit(add_text, [state, textbox, imagebox], [state, chatbot, textbox, imagebox] + btn_list
            ).then(http_bot, [state, topk, max_output_tokens, temperature],
                   [state, chatbot] + btn_list)
        submit_btn.click(add_text, [state, textbox, imagebox], [state, chatbot, textbox, imagebox] + btn_list
            ).then(http_bot, [state, topk, max_output_tokens, temperature],
                   [state, chatbot] + btn_list)

        demo.load(load_demo, [url_params], [state,
            chatbot, textbox, submit_btn, button_row, parameter_row],
            _js=get_window_url_params)

    return demo

if __name__ == "__main__":
    # cur_dir = os.path.dirname(os.path.abspath(__file__))
    # log_dir = cur_dir[:-9] + "log"
    cur_dir = "oss://mm-chatgpt/mplug_owl_demo/"
    log_dir = cur_dir + "log"

    parser = argparse.ArgumentParser()
    parser.add_argument("--host", type=str, default="0.0.0.0")
    parser.add_argument("--debug", action="store_true", help="using debug mode")
    parser.add_argument("--port", type=int)
    parser.add_argument("--concurrency-count", type=int, default=100)
    args = parser.parse_args()
    demo = build_demo()
    demo.queue(concurrency_count=args.concurrency_count, status_update_rate=10, api_open=False).launch(server_name=args.host, debug=args.debug, server_port=args.port, share=False)

